#! /usr/bin/env node

var program = require('commander');
var fs = require('fs');
var path = require('path');
var spawn = require('child_process').spawn;
var util = require('util');
var colors = require('colors');

program
  .version('0.0.0')
  .option('init', '[server] initialize!')
  .option('launch', '[client] launch that shizzzzz')
  .option('push', '[client] launch that shizzzzz')
  .parse(process.argv);

if (program.init) {
  var home = process.env['HOME'];
  var config = JSON.stringify({ directory: process.cwd() });
  fs.writeFileSync(path.join(home, '.oortserver'), config);
  fs.mkdirSync('.repos');
}

function getConfig(root) {
  if ('/' === root) return false;
  root = root || __dirname;

  var configPath = path.join(root, '.oort')
  if (fs.existsSync(configPath)) {
    var config;
    try {
      config = JSON.parse(fs.readFileSync(configPath));
    } catch (e) {
      console.log('could not read config');
      throw e;
    }
    return config;
  }

  return getConfig(path.resolve(root, '..'));
}

function createBareRepository(name, callback) {
  var git = spawn('git', ['clone', '--bare', '.git', name]);
  util.pump(git.stdout, process.stdout);
  util.pump(git.stderr, process.stderr);
  git.on('exit', function (code) {
    if (code !== 0) throw new Error('something went wrong with git');
    callback();
  });
}

function getRemoteConfig(remote, callback) {
  var sshData = '';
  var ssh = spawn('ssh', [remote, 'cat .oortserver']);
  ssh.stdout.on('data', function (data) { sshData += data });
  util.pump(ssh.stderr, process.stderr);
  
  ssh.on('exit', function (code) {
    if (code !== 0) throw new Error('something went wrong with ssh');
    callback(JSON.parse(sshData));
  })
}

function copyBareRepository(remote, bareRepoDir, remoteDir, callback) {
  // #TODO: make destination doesn't already exist
  
  function cleanup(callback) {
    var rmrf = spawn('rm', ['-rf', bareRepoDir])
    util.pump(rmrf.stdout, process.stdout);
    util.pump(rmrf.stderr, process.stderr);
    
    rmrf.on('exit', function (code) {
      if (code !== 0) throw new Error('something has gone wrong with the rm -rf of the bare repo');
      callback();
    })
  }
  
  var testRemoteExists = spawn('ssh', [remote, 'test -d ' + remoteDir])
  testRemoteExists.on('exit', function (code) {
    if (code === 0) { // remote exists
      console.dir(remoteDir);
      console.log('remote git repo already exists'.red);
      return cleanup(callback);
    }
    
    var scp = spawn('scp', ['-r', bareRepoDir, remote + ':' + remoteDir]);
    util.pump(scp.stdout, process.stdout);
    util.pump(scp.stderr, process.stderr);

    scp.on('exit', function (code) {  
      if (code !== 0) throw new Error('something has gone wrong with the scp');
      cleanup(callback);
    });
  });
}

function addRemoteOort(remote, remoteDir, callback) {
  console.log('adding remote `oort`');
  var git = spawn('git', ['remote', 'add', 'oort', remote + ':' + remoteDir]);
  util.pump(git.stdout, process.stdout);
  util.pump(git.stderr, process.stderr);
  
  git.on('exit', function (code) {
    if (code !== 0) {
      // not critical, but let the user know
      console.log('You already have a remote repository named `oort`.'.red)
    }
      
    callback();
  });
}

function initializeClient() {
  var config = getConfig();
  if (!config) throw new Error('could not get configuration');
  var remote = config.user + '@' + config.server;
  var bareRepo = 'oort-bare-repository';
  var repoName = path.basename(process.cwd());
  createBareRepository(bareRepo, function () {
    getRemoteConfig(remote, function (remoteConfig) { 
      var remoteDir = path.join(remoteConfig.directory, '.repos', repoName + '.git');
      copyBareRepository(remote, bareRepo, remoteDir, function () {
        addRemoteOort(remote, remoteDir, function () {
          console.log('things are looking good');
        });
      });
    });
  });
}

if (program.launch || program.push) { 
 initializeClient();
}
